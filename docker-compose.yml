version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: rag_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-claude_rag_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rag_network

  qdrant:
    image: qdrant/qdrant:latest
    container_name: rag_qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - rag_network

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: rag_backend
    environment:
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-claude_rag_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-all-MiniLM-L6-v2}
      CHUNK_SIZE: ${CHUNK_SIZE:-512}
      CHUNK_OVERLAP: ${CHUNK_OVERLAP:-50}
      TOP_K: ${TOP_K:-5}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - qdrant
    volumes:
      - ./uploads:/app/uploads
    networks:
      - rag_network
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: rag_frontend
    environment:
      API_URL: http://backend:8000
    ports:
      - "8501:8501"
    depends_on:
      - backend
    networks:
      - rag_network
    restart: unless-stopped

networks:
  rag_network:
    driver: bridge

volumes:
  postgres_data:
  qdrant_data: